
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800280c  0800280c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800280c  0800280c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800280c  0800280c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000005c  08002870  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002870  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000062ef  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014a8  00000000  00000000  000263b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00027860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054c  00000000  00000000  00027f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000162ce  00000000  00000000  000284a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ac6  00000000  00000000  0003e772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080546  00000000  00000000  00048238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002084  00000000  00000000  000c8780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ca804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002790 	.word	0x08002790

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002790 	.word	0x08002790

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f000 fef3 	bl	8000f84 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000078 	.word	0x20000078

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f000 fec3 	bl	8000f84 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000078 	.word	0x20000078

0800020c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    switch (row)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <lcd_put_cur+0x18>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d005      	beq.n	800022e <lcd_put_cur+0x22>
 8000222:	e009      	b.n	8000238 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	603b      	str	r3, [r7, #0]
            break;
 800022c:	e004      	b.n	8000238 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000234:	603b      	str	r3, [r7, #0]
            break;
 8000236:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <lcd_send_cmd>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_init>:


void lcd_init (void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f000 fab0 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000254:	2030      	movs	r0, #48	; 0x30
 8000256:	f7ff ff79 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800025a:	2005      	movs	r0, #5
 800025c:	f000 faaa 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000260:	2030      	movs	r0, #48	; 0x30
 8000262:	f7ff ff73 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000266:	2001      	movs	r0, #1
 8000268:	f000 faa4 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f7ff ff6d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000272:	200a      	movs	r0, #10
 8000274:	f000 fa9e 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000278:	2020      	movs	r0, #32
 800027a:	f7ff ff67 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f000 fa98 	bl	80007b4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f7ff ff61 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 fa92 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000290:	2008      	movs	r0, #8
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fa8c 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff55 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 fa86 	bl	80007b4 <HAL_Delay>
	HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f000 fa83 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ae:	2006      	movs	r0, #6
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 fa7d 	bl	80007b4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002cc:	e006      	b.n	80002dc <lcd_send_string+0x18>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff68 	bl	80001ac <lcd_send_data>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <lcd_send_string+0xa>
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f6:	f000 f9fb 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fa:	f000 f81b 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fe:	f000 f88d 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000302:	f000 f85d 	bl	80003c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	  lcd_init();
 8000306:	f7ff ffa0 	bl	800024a <lcd_init>
    int num = 1234;
 800030a:	f240 43d2 	movw	r3, #1234	; 0x4d2
 800030e:	60fb      	str	r3, [r7, #12]
    char numChar[5];
    sprintf(numChar, "%d", num);
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4906      	ldr	r1, [pc, #24]	; (8000330 <main+0x40>)
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fd88 	bl	8001e2c <siprintf>
    lcd_put_cur(0, 0);
 800031c:	2100      	movs	r1, #0
 800031e:	2000      	movs	r0, #0
 8000320:	f7ff ff74 	bl	800020c <lcd_put_cur>
    lcd_send_string (numChar);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffcc 	bl	80002c4 <lcd_send_string>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800032c:	e7fe      	b.n	800032c <main+0x3c>
 800032e:	bf00      	nop
 8000330:	080027a8 	.word	0x080027a8

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	; 0x40
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fd92 	bl	8001e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000356:	2301      	movs	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	2302      	movs	r3, #2
 800036a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000372:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f001 f959 	bl	8001634 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000388:	f000 f8a0 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fbc6 	bl	8001b38 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b2:	f000 f88b 	bl	80004cc <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
	...

080003c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_I2C1_Init+0x50>)
 80003c6:	4a13      	ldr	r2, [pc, #76]	; (8000414 <MX_I2C1_Init+0x54>)
 80003c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_I2C1_Init+0x50>)
 80003cc:	4a12      	ldr	r2, [pc, #72]	; (8000418 <MX_I2C1_Init+0x58>)
 80003ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_I2C1_Init+0x50>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_I2C1_Init+0x50>)
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_I2C1_Init+0x50>)
 80003de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_I2C1_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_I2C1_Init+0x50>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_I2C1_Init+0x50>)
 80003fe:	f000 fc7d 	bl	8000cfc <HAL_I2C_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000408:	f000 f860 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000078 	.word	0x20000078
 8000414:	40005400 	.word	0x40005400
 8000418:	000186a0 	.word	0x000186a0

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000430:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0310 	and.w	r3, r3, #16
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000448:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a1d      	ldr	r2, [pc, #116]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0320 	and.w	r3, r3, #32
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a11      	ldr	r2, [pc, #68]	; (80004c4 <MX_GPIO_Init+0xa8>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_GPIO_Init+0xa8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	480c      	ldr	r0, [pc, #48]	; (80004c8 <MX_GPIO_Init+0xac>)
 8000498:	f000 fc18 	bl	8000ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800049c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_GPIO_Init+0xac>)
 80004b6:	f000 fa85 	bl	80009c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ba:	bf00      	nop
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40011000 	.word	0x40011000

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <Error_Handler+0x8>
	...

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	4a14      	ldr	r2, [pc, #80]	; (8000534 <HAL_MspInit+0x5c>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6193      	str	r3, [r2, #24]
 80004ea:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <HAL_MspInit+0x5c>)
 80004fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_MspInit+0x60>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <HAL_MspInit+0x60>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	40010000 	.word	0x40010000

0800053c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a1d      	ldr	r2, [pc, #116]	; (80005cc <HAL_I2C_MspInit+0x90>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d132      	bne.n	80005c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_I2C_MspInit+0x94>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <HAL_I2C_MspInit+0x94>)
 8000562:	f043 0308 	orr.w	r3, r3, #8
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_I2C_MspInit+0x94>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0308 	and.w	r3, r3, #8
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000574:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057a:	2312      	movs	r3, #18
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <HAL_I2C_MspInit+0x98>)
 800058a:	f000 fa1b 	bl	80009c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800058e:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_I2C_MspInit+0x9c>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	f043 0302 	orr.w	r3, r3, #2
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	4a0c      	ldr	r2, [pc, #48]	; (80005d8 <HAL_I2C_MspInit+0x9c>)
 80005a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005aa:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <HAL_I2C_MspInit+0x94>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	4a08      	ldr	r2, [pc, #32]	; (80005d0 <HAL_I2C_MspInit+0x94>)
 80005b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b4:	61d3      	str	r3, [r2, #28]
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_I2C_MspInit+0x94>)
 80005b8:	69db      	ldr	r3, [r3, #28]
 80005ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40005400 	.word	0x40005400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	40010000 	.word	0x40010000

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <NMI_Handler+0x4>

080005e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler+0x4>

080005ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f2:	e7fe      	b.n	80005f2 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr

0800061e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000622:	f000 f8ab 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f001 fc0e 	bl	8001e7c <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20005000 	.word	0x20005000
 800068c:	00000400 	.word	0x00000400
 8000690:	200000cc 	.word	0x200000cc
 8000694:	20000220 	.word	0x20000220

08000698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff fff8 	bl	8000698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006aa:	490c      	ldr	r1, [pc, #48]	; (80006dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006ac:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006c0:	4c09      	ldr	r4, [pc, #36]	; (80006e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f001 fbdb 	bl	8001e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d2:	f7ff fe0d 	bl	80002f0 <main>
  bx lr
 80006d6:	4770      	bx	lr
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006e0:	08002814 	.word	0x08002814
  ldr r2, =_sbss
 80006e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006e8:	2000021c 	.word	0x2000021c

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f92b 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fee4 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f935 	bl	80009aa <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f90b 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000008 	.word	0x20000008
 800079c:	200000d0 	.word	0x200000d0

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	200000d0 	.word	0x200000d0

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff fff0 	bl	80007a0 <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_Delay+0x44>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffe0 	bl	80007a0 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	; (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	; (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	; 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	; 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff90 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff49 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff5e 	bl	8000844 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff90 	bl	80008b4 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5f 	bl	8000860 <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffb0 	bl	8000918 <SysTick_Config>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b08b      	sub	sp, #44	; 0x2c
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009d6:	e169      	b.n	8000cac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d8:	2201      	movs	r2, #1
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	69fa      	ldr	r2, [r7, #28]
 80009e8:	4013      	ands	r3, r2
 80009ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	f040 8158 	bne.w	8000ca6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a9a      	ldr	r2, [pc, #616]	; (8000c64 <HAL_GPIO_Init+0x2a0>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d05e      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a00:	4a98      	ldr	r2, [pc, #608]	; (8000c64 <HAL_GPIO_Init+0x2a0>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d875      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a06:	4a98      	ldr	r2, [pc, #608]	; (8000c68 <HAL_GPIO_Init+0x2a4>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d058      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a0c:	4a96      	ldr	r2, [pc, #600]	; (8000c68 <HAL_GPIO_Init+0x2a4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d86f      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a12:	4a96      	ldr	r2, [pc, #600]	; (8000c6c <HAL_GPIO_Init+0x2a8>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d052      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a18:	4a94      	ldr	r2, [pc, #592]	; (8000c6c <HAL_GPIO_Init+0x2a8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d869      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a1e:	4a94      	ldr	r2, [pc, #592]	; (8000c70 <HAL_GPIO_Init+0x2ac>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d04c      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a24:	4a92      	ldr	r2, [pc, #584]	; (8000c70 <HAL_GPIO_Init+0x2ac>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d863      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a2a:	4a92      	ldr	r2, [pc, #584]	; (8000c74 <HAL_GPIO_Init+0x2b0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d046      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
 8000a30:	4a90      	ldr	r2, [pc, #576]	; (8000c74 <HAL_GPIO_Init+0x2b0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d85d      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a36:	2b12      	cmp	r3, #18
 8000a38:	d82a      	bhi.n	8000a90 <HAL_GPIO_Init+0xcc>
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d859      	bhi.n	8000af2 <HAL_GPIO_Init+0x12e>
 8000a3e:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <HAL_GPIO_Init+0x80>)
 8000a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a44:	08000abf 	.word	0x08000abf
 8000a48:	08000a99 	.word	0x08000a99
 8000a4c:	08000aab 	.word	0x08000aab
 8000a50:	08000aed 	.word	0x08000aed
 8000a54:	08000af3 	.word	0x08000af3
 8000a58:	08000af3 	.word	0x08000af3
 8000a5c:	08000af3 	.word	0x08000af3
 8000a60:	08000af3 	.word	0x08000af3
 8000a64:	08000af3 	.word	0x08000af3
 8000a68:	08000af3 	.word	0x08000af3
 8000a6c:	08000af3 	.word	0x08000af3
 8000a70:	08000af3 	.word	0x08000af3
 8000a74:	08000af3 	.word	0x08000af3
 8000a78:	08000af3 	.word	0x08000af3
 8000a7c:	08000af3 	.word	0x08000af3
 8000a80:	08000af3 	.word	0x08000af3
 8000a84:	08000af3 	.word	0x08000af3
 8000a88:	08000aa1 	.word	0x08000aa1
 8000a8c:	08000ab5 	.word	0x08000ab5
 8000a90:	4a79      	ldr	r2, [pc, #484]	; (8000c78 <HAL_GPIO_Init+0x2b4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d013      	beq.n	8000abe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a96:	e02c      	b.n	8000af2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	623b      	str	r3, [r7, #32]
          break;
 8000a9e:	e029      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	623b      	str	r3, [r7, #32]
          break;
 8000aa8:	e024      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	3308      	adds	r3, #8
 8000ab0:	623b      	str	r3, [r7, #32]
          break;
 8000ab2:	e01f      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	330c      	adds	r3, #12
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e01a      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d102      	bne.n	8000acc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	623b      	str	r3, [r7, #32]
          break;
 8000aca:	e013      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d105      	bne.n	8000ae0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	611a      	str	r2, [r3, #16]
          break;
 8000ade:	e009      	b.n	8000af4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	615a      	str	r2, [r3, #20]
          break;
 8000aea:	e003      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e000      	b.n	8000af4 <HAL_GPIO_Init+0x130>
          break;
 8000af2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	2bff      	cmp	r3, #255	; 0xff
 8000af8:	d801      	bhi.n	8000afe <HAL_GPIO_Init+0x13a>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	e001      	b.n	8000b02 <HAL_GPIO_Init+0x13e>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3304      	adds	r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	2bff      	cmp	r3, #255	; 0xff
 8000b08:	d802      	bhi.n	8000b10 <HAL_GPIO_Init+0x14c>
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x152>
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	3b08      	subs	r3, #8
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	401a      	ands	r2, r3
 8000b28:	6a39      	ldr	r1, [r7, #32]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	431a      	orrs	r2, r3
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 80b1 	beq.w	8000ca6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b44:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a4c      	ldr	r2, [pc, #304]	; (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b4a      	ldr	r3, [pc, #296]	; (8000c7c <HAL_GPIO_Init+0x2b8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b5c:	4a48      	ldr	r2, [pc, #288]	; (8000c80 <HAL_GPIO_Init+0x2bc>)
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	3302      	adds	r3, #2
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	220f      	movs	r2, #15
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <HAL_GPIO_Init+0x2c0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d013      	beq.n	8000bb0 <HAL_GPIO_Init+0x1ec>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3f      	ldr	r2, [pc, #252]	; (8000c88 <HAL_GPIO_Init+0x2c4>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d00d      	beq.n	8000bac <HAL_GPIO_Init+0x1e8>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <HAL_GPIO_Init+0x2c8>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d007      	beq.n	8000ba8 <HAL_GPIO_Init+0x1e4>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a3d      	ldr	r2, [pc, #244]	; (8000c90 <HAL_GPIO_Init+0x2cc>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d101      	bne.n	8000ba4 <HAL_GPIO_Init+0x1e0>
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e006      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e004      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000ba8:	2302      	movs	r3, #2
 8000baa:	e002      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <HAL_GPIO_Init+0x1ee>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bb4:	f002 0203 	and.w	r2, r2, #3
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	4093      	lsls	r3, r2
 8000bbc:	68fa      	ldr	r2, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bc2:	492f      	ldr	r1, [pc, #188]	; (8000c80 <HAL_GPIO_Init+0x2bc>)
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	089b      	lsrs	r3, r3, #2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bdc:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	492c      	ldr	r1, [pc, #176]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4928      	ldr	r1, [pc, #160]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d006      	beq.n	8000c12 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c04:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	4922      	ldr	r1, [pc, #136]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60cb      	str	r3, [r1, #12]
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	491e      	ldr	r1, [pc, #120]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d006      	beq.n	8000c3a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4918      	ldr	r1, [pc, #96]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
 8000c38:	e006      	b.n	8000c48 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	4914      	ldr	r1, [pc, #80]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d021      	beq.n	8000c98 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	490e      	ldr	r1, [pc, #56]	; (8000c94 <HAL_GPIO_Init+0x2d0>)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	600b      	str	r3, [r1, #0]
 8000c60:	e021      	b.n	8000ca6 <HAL_GPIO_Init+0x2e2>
 8000c62:	bf00      	nop
 8000c64:	10320000 	.word	0x10320000
 8000c68:	10310000 	.word	0x10310000
 8000c6c:	10220000 	.word	0x10220000
 8000c70:	10210000 	.word	0x10210000
 8000c74:	10120000 	.word	0x10120000
 8000c78:	10110000 	.word	0x10110000
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010000 	.word	0x40010000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00
 8000c8c:	40011000 	.word	0x40011000
 8000c90:	40011400 	.word	0x40011400
 8000c94:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_GPIO_Init+0x304>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4909      	ldr	r1, [pc, #36]	; (8000cc8 <HAL_GPIO_Init+0x304>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	3301      	adds	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f47f ae8e 	bne.w	80009d8 <HAL_GPIO_Init+0x14>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	bf00      	nop
 8000cc0:	372c      	adds	r7, #44	; 0x2c
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40010400 	.word	0x40010400

08000ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cdc:	787b      	ldrb	r3, [r7, #1]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ce2:	887a      	ldrh	r2, [r7, #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ce8:	e003      	b.n	8000cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cea:	887b      	ldrh	r3, [r7, #2]
 8000cec:	041a      	lsls	r2, r3, #16
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	611a      	str	r2, [r3, #16]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e12b      	b.n	8000f66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d106      	bne.n	8000d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fc0a 	bl	800053c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2224      	movs	r2, #36	; 0x24
 8000d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0201 	bic.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d60:	f001 f832 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8000d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a81      	ldr	r2, [pc, #516]	; (8000f70 <HAL_I2C_Init+0x274>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d807      	bhi.n	8000d80 <HAL_I2C_Init+0x84>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4a80      	ldr	r2, [pc, #512]	; (8000f74 <HAL_I2C_Init+0x278>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	bf94      	ite	ls
 8000d78:	2301      	movls	r3, #1
 8000d7a:	2300      	movhi	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	e006      	b.n	8000d8e <HAL_I2C_Init+0x92>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4a7d      	ldr	r2, [pc, #500]	; (8000f78 <HAL_I2C_Init+0x27c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	bf94      	ite	ls
 8000d88:	2301      	movls	r3, #1
 8000d8a:	2300      	movhi	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e0e7      	b.n	8000f66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4a78      	ldr	r2, [pc, #480]	; (8000f7c <HAL_I2C_Init+0x280>)
 8000d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9e:	0c9b      	lsrs	r3, r3, #18
 8000da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	4a6a      	ldr	r2, [pc, #424]	; (8000f70 <HAL_I2C_Init+0x274>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d802      	bhi.n	8000dd0 <HAL_I2C_Init+0xd4>
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	e009      	b.n	8000de4 <HAL_I2C_Init+0xe8>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	4a69      	ldr	r2, [pc, #420]	; (8000f80 <HAL_I2C_Init+0x284>)
 8000ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8000de0:	099b      	lsrs	r3, r3, #6
 8000de2:	3301      	adds	r3, #1
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	495c      	ldr	r1, [pc, #368]	; (8000f70 <HAL_I2C_Init+0x274>)
 8000e00:	428b      	cmp	r3, r1
 8000e02:	d819      	bhi.n	8000e38 <HAL_I2C_Init+0x13c>
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	1e59      	subs	r1, r3, #1
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e12:	1c59      	adds	r1, r3, #1
 8000e14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e18:	400b      	ands	r3, r1
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00a      	beq.n	8000e34 <HAL_I2C_Init+0x138>
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1e59      	subs	r1, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e32:	e051      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e04f      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d111      	bne.n	8000e64 <HAL_I2C_Init+0x168>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6859      	ldr	r1, [r3, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e52:	3301      	adds	r3, #1
 8000e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf0c      	ite	eq
 8000e5c:	2301      	moveq	r3, #1
 8000e5e:	2300      	movne	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	e012      	b.n	8000e8a <HAL_I2C_Init+0x18e>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6859      	ldr	r1, [r3, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	0099      	lsls	r1, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf0c      	ite	eq
 8000e84:	2301      	moveq	r3, #1
 8000e86:	2300      	movne	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Init+0x196>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e022      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10e      	bne.n	8000eb8 <HAL_I2C_Init+0x1bc>
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1e58      	subs	r0, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6859      	ldr	r1, [r3, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	440b      	add	r3, r1
 8000ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb6:	e00f      	b.n	8000ed8 <HAL_I2C_Init+0x1dc>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6859      	ldr	r1, [r3, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	0099      	lsls	r1, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ed8:	6879      	ldr	r1, [r7, #4]
 8000eda:	6809      	ldr	r1, [r1, #0]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a1b      	ldr	r3, [r3, #32]
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6911      	ldr	r1, [r2, #16]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68d2      	ldr	r2, [r2, #12]
 8000f12:	4311      	orrs	r1, r2
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	000186a0 	.word	0x000186a0
 8000f74:	001e847f 	.word	0x001e847f
 8000f78:	003d08ff 	.word	0x003d08ff
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	10624dd3 	.word	0x10624dd3

08000f84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	460b      	mov	r3, r1
 8000f92:	817b      	strh	r3, [r7, #10]
 8000f94:	4613      	mov	r3, r2
 8000f96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff fc02 	bl	80007a0 <HAL_GetTick>
 8000f9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	f040 80e0 	bne.w	800116c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	2319      	movs	r3, #25
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4970      	ldr	r1, [pc, #448]	; (8001178 <HAL_I2C_Master_Transmit+0x1f4>)
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f000 f964 	bl	8001284 <I2C_WaitOnFlagUntilTimeout>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e0d3      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d101      	bne.n	8000fd4 <HAL_I2C_Master_Transmit+0x50>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e0cc      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d007      	beq.n	8000ffa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001008:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2221      	movs	r2, #33	; 0x21
 800100e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2210      	movs	r2, #16
 8001016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2200      	movs	r2, #0
 800101e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	893a      	ldrh	r2, [r7, #8]
 800102a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001030:	b29a      	uxth	r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4a50      	ldr	r2, [pc, #320]	; (800117c <HAL_I2C_Master_Transmit+0x1f8>)
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800103c:	8979      	ldrh	r1, [r7, #10]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	6a3a      	ldr	r2, [r7, #32]
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f89c 	bl	8001180 <I2C_MasterRequestWrite>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e08d      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001068:	e066      	b.n	8001138 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	6a39      	ldr	r1, [r7, #32]
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f000 fa22 	bl	80014b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00d      	beq.n	8001096 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	2b04      	cmp	r3, #4
 8001080:	d107      	bne.n	8001092 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e06b      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010be:	3b01      	subs	r3, #1
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d11b      	bne.n	800110c <HAL_I2C_Master_Transmit+0x188>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d017      	beq.n	800110c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	781a      	ldrb	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001104:	3b01      	subs	r3, #1
 8001106:	b29a      	uxth	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 fa19 	bl	8001548 <I2C_WaitOnBTFFlagUntilTimeout>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00d      	beq.n	8001138 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	2b04      	cmp	r3, #4
 8001122:	d107      	bne.n	8001134 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e01a      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800113c:	2b00      	cmp	r3, #0
 800113e:	d194      	bne.n	800106a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2220      	movs	r2, #32
 8001154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	e000      	b.n	800116e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800116c:	2302      	movs	r3, #2
  }
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00100002 	.word	0x00100002
 800117c:	ffff0000 	.word	0xffff0000

08001180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af02      	add	r7, sp, #8
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	460b      	mov	r3, r1
 800118e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d006      	beq.n	80011aa <I2C_MasterRequestWrite+0x2a>
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d003      	beq.n	80011aa <I2C_MasterRequestWrite+0x2a>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80011a8:	d108      	bne.n	80011bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	e00b      	b.n	80011d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	2b12      	cmp	r3, #18
 80011c2:	d107      	bne.n	80011d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f84f 	bl	8001284 <I2C_WaitOnFlagUntilTimeout>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00d      	beq.n	8001208 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011fa:	d103      	bne.n	8001204 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001202:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e035      	b.n	8001274 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001210:	d108      	bne.n	8001224 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001212:	897b      	ldrh	r3, [r7, #10]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001220:	611a      	str	r2, [r3, #16]
 8001222:	e01b      	b.n	800125c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	11db      	asrs	r3, r3, #7
 8001228:	b2db      	uxtb	r3, r3
 800122a:	f003 0306 	and.w	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f063 030f 	orn	r3, r3, #15
 8001234:	b2da      	uxtb	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <I2C_MasterRequestWrite+0xfc>)
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f898 	bl	8001378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e010      	b.n	8001274 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001252:	897b      	ldrh	r3, [r7, #10]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <I2C_MasterRequestWrite+0x100>)
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 f888 	bl	8001378 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	00010008 	.word	0x00010008
 8001280:	00010002 	.word	0x00010002

08001284 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001294:	e048      	b.n	8001328 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d044      	beq.n	8001328 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800129e:	f7ff fa7f 	bl	80007a0 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d302      	bcc.n	80012b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d139      	bne.n	8001328 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	0c1b      	lsrs	r3, r3, #16
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10d      	bne.n	80012da <I2C_WaitOnFlagUntilTimeout+0x56>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4013      	ands	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf0c      	ite	eq
 80012d0:	2301      	moveq	r3, #1
 80012d2:	2300      	movne	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	e00c      	b.n	80012f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	43da      	mvns	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	4013      	ands	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf0c      	ite	eq
 80012ec:	2301      	moveq	r3, #1
 80012ee:	2300      	movne	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d116      	bne.n	8001328 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2220      	movs	r2, #32
 8001304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f043 0220 	orr.w	r2, r3, #32
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e023      	b.n	8001370 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	0c1b      	lsrs	r3, r3, #16
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10d      	bne.n	800134e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	43da      	mvns	r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	4013      	ands	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	bf0c      	ite	eq
 8001344:	2301      	moveq	r3, #1
 8001346:	2300      	movne	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	e00c      	b.n	8001368 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	43da      	mvns	r2, r3
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	4013      	ands	r3, r2
 800135a:	b29b      	uxth	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf0c      	ite	eq
 8001360:	2301      	moveq	r3, #1
 8001362:	2300      	movne	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	429a      	cmp	r2, r3
 800136c:	d093      	beq.n	8001296 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001386:	e071      	b.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d123      	bne.n	80013e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2220      	movs	r2, #32
 80013bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f043 0204 	orr.w	r2, r3, #4
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e067      	b.n	80014b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e6:	d041      	beq.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013e8:	f7ff f9da 	bl	80007a0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d302      	bcc.n	80013fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d136      	bne.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	0c1b      	lsrs	r3, r3, #16
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d10c      	bne.n	8001422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4013      	ands	r3, r2
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	bf14      	ite	ne
 800141a:	2301      	movne	r3, #1
 800141c:	2300      	moveq	r3, #0
 800141e:	b2db      	uxtb	r3, r3
 8001420:	e00b      	b.n	800143a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	43da      	mvns	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4013      	ands	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2220      	movs	r2, #32
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f043 0220 	orr.w	r2, r3, #32
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e021      	b.n	80014b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	0c1b      	lsrs	r3, r3, #16
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d10c      	bne.n	8001490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	43da      	mvns	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	4013      	ands	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	e00b      	b.n	80014a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4013      	ands	r3, r2
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bf14      	ite	ne
 80014a2:	2301      	movne	r3, #1
 80014a4:	2300      	moveq	r3, #0
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f47f af6d 	bne.w	8001388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014c4:	e034      	b.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f886 	bl	80015d8 <I2C_IsAcknowledgeFailed>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e034      	b.n	8001540 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d028      	beq.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014de:	f7ff f95f 	bl	80007a0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d302      	bcc.n	80014f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11d      	bne.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014fe:	2b80      	cmp	r3, #128	; 0x80
 8001500:	d016      	beq.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f043 0220 	orr.w	r2, r3, #32
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e007      	b.n	8001540 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	2b80      	cmp	r3, #128	; 0x80
 800153c:	d1c3      	bne.n	80014c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001554:	e034      	b.n	80015c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 f83e 	bl	80015d8 <I2C_IsAcknowledgeFailed>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e034      	b.n	80015d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d028      	beq.n	80015c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800156e:	f7ff f917 	bl	80007a0 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	429a      	cmp	r2, r3
 800157c:	d302      	bcc.n	8001584 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11d      	bne.n	80015c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	2b04      	cmp	r3, #4
 8001590:	d016      	beq.n	80015c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2220      	movs	r2, #32
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f043 0220 	orr.w	r2, r3, #32
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e007      	b.n	80015d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d1c3      	bne.n	8001556 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d11b      	bne.n	8001628 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80015f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0204 	orr.w	r2, r3, #4
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e272      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8087 	beq.w	8001762 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001654:	4b92      	ldr	r3, [pc, #584]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b04      	cmp	r3, #4
 800165e:	d00c      	beq.n	800167a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001660:	4b8f      	ldr	r3, [pc, #572]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d112      	bne.n	8001692 <HAL_RCC_OscConfig+0x5e>
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d10b      	bne.n	8001692 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167a:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d06c      	beq.n	8001760 <HAL_RCC_OscConfig+0x12c>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d168      	bne.n	8001760 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e24c      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x76>
 800169c:	4b80      	ldr	r3, [pc, #512]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a7f      	ldr	r2, [pc, #508]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	e02e      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a77      	ldr	r2, [pc, #476]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0xbc>
 80016d6:	4b72      	ldr	r3, [pc, #456]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a71      	ldr	r2, [pc, #452]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b6f      	ldr	r3, [pc, #444]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a6e      	ldr	r2, [pc, #440]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016f0:	4b6b      	ldr	r3, [pc, #428]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6a      	ldr	r2, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a67      	ldr	r2, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d013      	beq.n	8001738 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f846 	bl	80007a0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff f842 	bl	80007a0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	; 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e200      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f0      	beq.n	8001718 <HAL_RCC_OscConfig+0xe4>
 8001736:	e014      	b.n	8001762 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff f832 	bl	80007a0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001740:	f7ff f82e 	bl	80007a0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b64      	cmp	r3, #100	; 0x64
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1ec      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x10c>
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d063      	beq.n	8001836 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800176e:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00b      	beq.n	8001792 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x18c>
 8001786:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d116      	bne.n	80017c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	4b43      	ldr	r3, [pc, #268]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x176>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e1c0      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4939      	ldr	r1, [pc, #228]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	e03a      	b.n	8001836 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c8:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7fe ffe7 	bl	80007a0 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7fe ffe3 	bl	80007a0 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1a1      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 8001804:	4313      	orrs	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_OscConfig+0x270>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7fe ffc6 	bl	80007a0 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7fe ffc2 	bl	80007a0 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e180      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03a      	beq.n	80018b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d019      	beq.n	800187e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_RCC_OscConfig+0x274>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7fe ffa6 	bl	80007a0 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001858:	f7fe ffa2 	bl	80007a0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e160      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <HAL_RCC_OscConfig+0x26c>)
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001876:	2001      	movs	r0, #1
 8001878:	f000 faba 	bl	8001df0 <RCC_Delay>
 800187c:	e01c      	b.n	80018b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_RCC_OscConfig+0x274>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7fe ff8c 	bl	80007a0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188a:	e00f      	b.n	80018ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188c:	f7fe ff88 	bl	80007a0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d908      	bls.n	80018ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e146      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	42420000 	.word	0x42420000
 80018a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e9      	bne.n	800188c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a6 	beq.w	8001a12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10d      	bne.n	80018f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ee:	2301      	movs	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f2:	4b82      	ldr	r3, [pc, #520]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fe:	4b7f      	ldr	r3, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a7e      	ldr	r2, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800190a:	f7fe ff49 	bl	80007a0 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7fe ff45 	bl	80007a0 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	; 0x64
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e103      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x4c8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x312>
 8001938:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6213      	str	r3, [r2, #32]
 8001944:	e02d      	b.n	80019a2 <HAL_RCC_OscConfig+0x36e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x334>
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a69      	ldr	r2, [pc, #420]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4a66      	ldr	r2, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f023 0304 	bic.w	r3, r3, #4
 8001964:	6213      	str	r3, [r2, #32]
 8001966:	e01c      	b.n	80019a2 <HAL_RCC_OscConfig+0x36e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b05      	cmp	r3, #5
 800196e:	d10c      	bne.n	800198a <HAL_RCC_OscConfig+0x356>
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	6213      	str	r3, [r2, #32]
 800197c:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	4a5d      	ldr	r2, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6213      	str	r3, [r2, #32]
 8001988:	e00b      	b.n	80019a2 <HAL_RCC_OscConfig+0x36e>
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7fe fef9 	bl	80007a0 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7fe fef5 	bl	80007a0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0b1      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x37e>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d6:	f7fe fee3 	bl	80007a0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7fe fedf 	bl	80007a0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e09b      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a06:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a3b      	ldr	r2, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8087 	beq.w	8001b2a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d061      	beq.n	8001aec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d146      	bne.n	8001abe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x4cc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7fe feb3 	bl	80007a0 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7fe feaf 	bl	80007a0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e06d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d108      	bne.n	8001a78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a66:	4b24      	ldr	r3, [pc, #144]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4921      	ldr	r1, [pc, #132]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a78:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a19      	ldr	r1, [r3, #32]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	491b      	ldr	r1, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4cc>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe fe83 	bl	80007a0 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe fe7f 	bl	80007a0 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e03d      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46a>
 8001abc:	e035      	b.n	8001b2a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x4cc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fe6c 	bl	80007a0 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7fe fe68 	bl	80007a0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e026      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x498>
 8001aea:	e01e      	b.n	8001b2a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e019      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40007000 	.word	0x40007000
 8001b00:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x500>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d001      	beq.n	8001b2a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e0d0      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b6a      	ldr	r3, [pc, #424]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d910      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4965      	ldr	r1, [pc, #404]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0b8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	4a58      	ldr	r2, [pc, #352]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b9e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	4b53      	ldr	r3, [pc, #332]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bb6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	494d      	ldr	r1, [pc, #308]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d040      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d115      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e073      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06b      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4936      	ldr	r1, [pc, #216]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c28:	f7fe fdba 	bl	80007a0 <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7fe fdb6 	bl	80007a0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e053      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 020c 	and.w	r2, r3, #12
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1eb      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d210      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 0207 	bic.w	r2, r3, #7
 8001c6e:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e032      	b.n	8001cee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4916      	ldr	r1, [pc, #88]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	490e      	ldr	r1, [pc, #56]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 f821 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	490a      	ldr	r1, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x1c8>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <HAL_RCC_ClockConfig+0x1cc>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fd18 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	080027ac 	.word	0x080027ac
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0x30>
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d003      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x36>
 8001d3a:	e027      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3e:	613b      	str	r3, [r7, #16]
      break;
 8001d40:	e027      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	0c9b      	lsrs	r3, r3, #18
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d4c:	5cd3      	ldrb	r3, [r2, r3]
 8001d4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d010      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0c5b      	lsrs	r3, r3, #17
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d6e:	fb03 f202 	mul.w	r2, r3, r2
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e004      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	613b      	str	r3, [r7, #16]
      break;
 8001d8a:	e002      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d8e:	613b      	str	r3, [r7, #16]
      break;
 8001d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d92:	693b      	ldr	r3, [r7, #16]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	007a1200 	.word	0x007a1200
 8001da8:	080027c4 	.word	0x080027c4
 8001dac:	080027d4 	.word	0x080027d4
 8001db0:	003d0900 	.word	0x003d0900

08001db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dcc:	f7ff fff2 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	080027bc 	.word	0x080027bc

08001df0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <RCC_Delay+0x34>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <RCC_Delay+0x38>)
 8001dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e0c:	bf00      	nop
  }
  while (Delay --);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f9      	bne.n	8001e0c <RCC_Delay+0x1c>
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	20000000 	.word	0x20000000
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <siprintf>:
 8001e2c:	b40e      	push	{r1, r2, r3}
 8001e2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e32:	b500      	push	{lr}
 8001e34:	b09c      	sub	sp, #112	; 0x70
 8001e36:	ab1d      	add	r3, sp, #116	; 0x74
 8001e38:	9002      	str	r0, [sp, #8]
 8001e3a:	9006      	str	r0, [sp, #24]
 8001e3c:	9107      	str	r1, [sp, #28]
 8001e3e:	9104      	str	r1, [sp, #16]
 8001e40:	4808      	ldr	r0, [pc, #32]	; (8001e64 <siprintf+0x38>)
 8001e42:	4909      	ldr	r1, [pc, #36]	; (8001e68 <siprintf+0x3c>)
 8001e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e48:	9105      	str	r1, [sp, #20]
 8001e4a:	6800      	ldr	r0, [r0, #0]
 8001e4c:	a902      	add	r1, sp, #8
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	f000 f98e 	bl	8002170 <_svfiprintf_r>
 8001e54:	2200      	movs	r2, #0
 8001e56:	9b02      	ldr	r3, [sp, #8]
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	b01c      	add	sp, #112	; 0x70
 8001e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e60:	b003      	add	sp, #12
 8001e62:	4770      	bx	lr
 8001e64:	20000058 	.word	0x20000058
 8001e68:	ffff0208 	.word	0xffff0208

08001e6c <memset>:
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4402      	add	r2, r0
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d100      	bne.n	8001e76 <memset+0xa>
 8001e74:	4770      	bx	lr
 8001e76:	f803 1b01 	strb.w	r1, [r3], #1
 8001e7a:	e7f9      	b.n	8001e70 <memset+0x4>

08001e7c <__errno>:
 8001e7c:	4b01      	ldr	r3, [pc, #4]	; (8001e84 <__errno+0x8>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000058 	.word	0x20000058

08001e88 <__libc_init_array>:
 8001e88:	b570      	push	{r4, r5, r6, lr}
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	4d0c      	ldr	r5, [pc, #48]	; (8001ec0 <__libc_init_array+0x38>)
 8001e8e:	4c0d      	ldr	r4, [pc, #52]	; (8001ec4 <__libc_init_array+0x3c>)
 8001e90:	1b64      	subs	r4, r4, r5
 8001e92:	10a4      	asrs	r4, r4, #2
 8001e94:	42a6      	cmp	r6, r4
 8001e96:	d109      	bne.n	8001eac <__libc_init_array+0x24>
 8001e98:	f000 fc7a 	bl	8002790 <_init>
 8001e9c:	2600      	movs	r6, #0
 8001e9e:	4d0a      	ldr	r5, [pc, #40]	; (8001ec8 <__libc_init_array+0x40>)
 8001ea0:	4c0a      	ldr	r4, [pc, #40]	; (8001ecc <__libc_init_array+0x44>)
 8001ea2:	1b64      	subs	r4, r4, r5
 8001ea4:	10a4      	asrs	r4, r4, #2
 8001ea6:	42a6      	cmp	r6, r4
 8001ea8:	d105      	bne.n	8001eb6 <__libc_init_array+0x2e>
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb0:	4798      	blx	r3
 8001eb2:	3601      	adds	r6, #1
 8001eb4:	e7ee      	b.n	8001e94 <__libc_init_array+0xc>
 8001eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eba:	4798      	blx	r3
 8001ebc:	3601      	adds	r6, #1
 8001ebe:	e7f2      	b.n	8001ea6 <__libc_init_array+0x1e>
 8001ec0:	0800280c 	.word	0x0800280c
 8001ec4:	0800280c 	.word	0x0800280c
 8001ec8:	0800280c 	.word	0x0800280c
 8001ecc:	08002810 	.word	0x08002810

08001ed0 <__retarget_lock_acquire_recursive>:
 8001ed0:	4770      	bx	lr

08001ed2 <__retarget_lock_release_recursive>:
 8001ed2:	4770      	bx	lr

08001ed4 <_free_r>:
 8001ed4:	b538      	push	{r3, r4, r5, lr}
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	2900      	cmp	r1, #0
 8001eda:	d040      	beq.n	8001f5e <_free_r+0x8a>
 8001edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ee0:	1f0c      	subs	r4, r1, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bfb8      	it	lt
 8001ee6:	18e4      	addlt	r4, r4, r3
 8001ee8:	f000 f8dc 	bl	80020a4 <__malloc_lock>
 8001eec:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <_free_r+0x8c>)
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	b933      	cbnz	r3, 8001f00 <_free_r+0x2c>
 8001ef2:	6063      	str	r3, [r4, #4]
 8001ef4:	6014      	str	r4, [r2, #0]
 8001ef6:	4628      	mov	r0, r5
 8001ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001efc:	f000 b8d8 	b.w	80020b0 <__malloc_unlock>
 8001f00:	42a3      	cmp	r3, r4
 8001f02:	d908      	bls.n	8001f16 <_free_r+0x42>
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	1821      	adds	r1, r4, r0
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	bf01      	itttt	eq
 8001f0c:	6819      	ldreq	r1, [r3, #0]
 8001f0e:	685b      	ldreq	r3, [r3, #4]
 8001f10:	1809      	addeq	r1, r1, r0
 8001f12:	6021      	streq	r1, [r4, #0]
 8001f14:	e7ed      	b.n	8001ef2 <_free_r+0x1e>
 8001f16:	461a      	mov	r2, r3
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	b10b      	cbz	r3, 8001f20 <_free_r+0x4c>
 8001f1c:	42a3      	cmp	r3, r4
 8001f1e:	d9fa      	bls.n	8001f16 <_free_r+0x42>
 8001f20:	6811      	ldr	r1, [r2, #0]
 8001f22:	1850      	adds	r0, r2, r1
 8001f24:	42a0      	cmp	r0, r4
 8001f26:	d10b      	bne.n	8001f40 <_free_r+0x6c>
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	4401      	add	r1, r0
 8001f2c:	1850      	adds	r0, r2, r1
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	6011      	str	r1, [r2, #0]
 8001f32:	d1e0      	bne.n	8001ef6 <_free_r+0x22>
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4408      	add	r0, r1
 8001f3a:	6010      	str	r0, [r2, #0]
 8001f3c:	6053      	str	r3, [r2, #4]
 8001f3e:	e7da      	b.n	8001ef6 <_free_r+0x22>
 8001f40:	d902      	bls.n	8001f48 <_free_r+0x74>
 8001f42:	230c      	movs	r3, #12
 8001f44:	602b      	str	r3, [r5, #0]
 8001f46:	e7d6      	b.n	8001ef6 <_free_r+0x22>
 8001f48:	6820      	ldr	r0, [r4, #0]
 8001f4a:	1821      	adds	r1, r4, r0
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	bf01      	itttt	eq
 8001f50:	6819      	ldreq	r1, [r3, #0]
 8001f52:	685b      	ldreq	r3, [r3, #4]
 8001f54:	1809      	addeq	r1, r1, r0
 8001f56:	6021      	streq	r1, [r4, #0]
 8001f58:	6063      	str	r3, [r4, #4]
 8001f5a:	6054      	str	r4, [r2, #4]
 8001f5c:	e7cb      	b.n	8001ef6 <_free_r+0x22>
 8001f5e:	bd38      	pop	{r3, r4, r5, pc}
 8001f60:	20000214 	.word	0x20000214

08001f64 <sbrk_aligned>:
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	4e0e      	ldr	r6, [pc, #56]	; (8001fa0 <sbrk_aligned+0x3c>)
 8001f68:	460c      	mov	r4, r1
 8001f6a:	6831      	ldr	r1, [r6, #0]
 8001f6c:	4605      	mov	r5, r0
 8001f6e:	b911      	cbnz	r1, 8001f76 <sbrk_aligned+0x12>
 8001f70:	f000 fbaa 	bl	80026c8 <_sbrk_r>
 8001f74:	6030      	str	r0, [r6, #0]
 8001f76:	4621      	mov	r1, r4
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f000 fba5 	bl	80026c8 <_sbrk_r>
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	d00a      	beq.n	8001f98 <sbrk_aligned+0x34>
 8001f82:	1cc4      	adds	r4, r0, #3
 8001f84:	f024 0403 	bic.w	r4, r4, #3
 8001f88:	42a0      	cmp	r0, r4
 8001f8a:	d007      	beq.n	8001f9c <sbrk_aligned+0x38>
 8001f8c:	1a21      	subs	r1, r4, r0
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f000 fb9a 	bl	80026c8 <_sbrk_r>
 8001f94:	3001      	adds	r0, #1
 8001f96:	d101      	bne.n	8001f9c <sbrk_aligned+0x38>
 8001f98:	f04f 34ff 	mov.w	r4, #4294967295
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	bd70      	pop	{r4, r5, r6, pc}
 8001fa0:	20000218 	.word	0x20000218

08001fa4 <_malloc_r>:
 8001fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fa8:	1ccd      	adds	r5, r1, #3
 8001faa:	f025 0503 	bic.w	r5, r5, #3
 8001fae:	3508      	adds	r5, #8
 8001fb0:	2d0c      	cmp	r5, #12
 8001fb2:	bf38      	it	cc
 8001fb4:	250c      	movcc	r5, #12
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	4607      	mov	r7, r0
 8001fba:	db01      	blt.n	8001fc0 <_malloc_r+0x1c>
 8001fbc:	42a9      	cmp	r1, r5
 8001fbe:	d905      	bls.n	8001fcc <_malloc_r+0x28>
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	2600      	movs	r6, #0
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80020a0 <_malloc_r+0xfc>
 8001fd0:	f000 f868 	bl	80020a4 <__malloc_lock>
 8001fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8001fd8:	461c      	mov	r4, r3
 8001fda:	bb5c      	cbnz	r4, 8002034 <_malloc_r+0x90>
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4638      	mov	r0, r7
 8001fe0:	f7ff ffc0 	bl	8001f64 <sbrk_aligned>
 8001fe4:	1c43      	adds	r3, r0, #1
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	d155      	bne.n	8002096 <_malloc_r+0xf2>
 8001fea:	f8d8 4000 	ldr.w	r4, [r8]
 8001fee:	4626      	mov	r6, r4
 8001ff0:	2e00      	cmp	r6, #0
 8001ff2:	d145      	bne.n	8002080 <_malloc_r+0xdc>
 8001ff4:	2c00      	cmp	r4, #0
 8001ff6:	d048      	beq.n	800208a <_malloc_r+0xe6>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	4631      	mov	r1, r6
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	eb04 0903 	add.w	r9, r4, r3
 8002002:	f000 fb61 	bl	80026c8 <_sbrk_r>
 8002006:	4581      	cmp	r9, r0
 8002008:	d13f      	bne.n	800208a <_malloc_r+0xe6>
 800200a:	6821      	ldr	r1, [r4, #0]
 800200c:	4638      	mov	r0, r7
 800200e:	1a6d      	subs	r5, r5, r1
 8002010:	4629      	mov	r1, r5
 8002012:	f7ff ffa7 	bl	8001f64 <sbrk_aligned>
 8002016:	3001      	adds	r0, #1
 8002018:	d037      	beq.n	800208a <_malloc_r+0xe6>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	442b      	add	r3, r5
 800201e:	6023      	str	r3, [r4, #0]
 8002020:	f8d8 3000 	ldr.w	r3, [r8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d038      	beq.n	800209a <_malloc_r+0xf6>
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	42a2      	cmp	r2, r4
 800202c:	d12b      	bne.n	8002086 <_malloc_r+0xe2>
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e00f      	b.n	8002054 <_malloc_r+0xb0>
 8002034:	6822      	ldr	r2, [r4, #0]
 8002036:	1b52      	subs	r2, r2, r5
 8002038:	d41f      	bmi.n	800207a <_malloc_r+0xd6>
 800203a:	2a0b      	cmp	r2, #11
 800203c:	d917      	bls.n	800206e <_malloc_r+0xca>
 800203e:	1961      	adds	r1, r4, r5
 8002040:	42a3      	cmp	r3, r4
 8002042:	6025      	str	r5, [r4, #0]
 8002044:	bf18      	it	ne
 8002046:	6059      	strne	r1, [r3, #4]
 8002048:	6863      	ldr	r3, [r4, #4]
 800204a:	bf08      	it	eq
 800204c:	f8c8 1000 	streq.w	r1, [r8]
 8002050:	5162      	str	r2, [r4, r5]
 8002052:	604b      	str	r3, [r1, #4]
 8002054:	4638      	mov	r0, r7
 8002056:	f104 060b 	add.w	r6, r4, #11
 800205a:	f000 f829 	bl	80020b0 <__malloc_unlock>
 800205e:	f026 0607 	bic.w	r6, r6, #7
 8002062:	1d23      	adds	r3, r4, #4
 8002064:	1af2      	subs	r2, r6, r3
 8002066:	d0ae      	beq.n	8001fc6 <_malloc_r+0x22>
 8002068:	1b9b      	subs	r3, r3, r6
 800206a:	50a3      	str	r3, [r4, r2]
 800206c:	e7ab      	b.n	8001fc6 <_malloc_r+0x22>
 800206e:	42a3      	cmp	r3, r4
 8002070:	6862      	ldr	r2, [r4, #4]
 8002072:	d1dd      	bne.n	8002030 <_malloc_r+0x8c>
 8002074:	f8c8 2000 	str.w	r2, [r8]
 8002078:	e7ec      	b.n	8002054 <_malloc_r+0xb0>
 800207a:	4623      	mov	r3, r4
 800207c:	6864      	ldr	r4, [r4, #4]
 800207e:	e7ac      	b.n	8001fda <_malloc_r+0x36>
 8002080:	4634      	mov	r4, r6
 8002082:	6876      	ldr	r6, [r6, #4]
 8002084:	e7b4      	b.n	8001ff0 <_malloc_r+0x4c>
 8002086:	4613      	mov	r3, r2
 8002088:	e7cc      	b.n	8002024 <_malloc_r+0x80>
 800208a:	230c      	movs	r3, #12
 800208c:	4638      	mov	r0, r7
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	f000 f80e 	bl	80020b0 <__malloc_unlock>
 8002094:	e797      	b.n	8001fc6 <_malloc_r+0x22>
 8002096:	6025      	str	r5, [r4, #0]
 8002098:	e7dc      	b.n	8002054 <_malloc_r+0xb0>
 800209a:	605b      	str	r3, [r3, #4]
 800209c:	deff      	udf	#255	; 0xff
 800209e:	bf00      	nop
 80020a0:	20000214 	.word	0x20000214

080020a4 <__malloc_lock>:
 80020a4:	4801      	ldr	r0, [pc, #4]	; (80020ac <__malloc_lock+0x8>)
 80020a6:	f7ff bf13 	b.w	8001ed0 <__retarget_lock_acquire_recursive>
 80020aa:	bf00      	nop
 80020ac:	20000210 	.word	0x20000210

080020b0 <__malloc_unlock>:
 80020b0:	4801      	ldr	r0, [pc, #4]	; (80020b8 <__malloc_unlock+0x8>)
 80020b2:	f7ff bf0e 	b.w	8001ed2 <__retarget_lock_release_recursive>
 80020b6:	bf00      	nop
 80020b8:	20000210 	.word	0x20000210

080020bc <__ssputs_r>:
 80020bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c0:	461f      	mov	r7, r3
 80020c2:	688e      	ldr	r6, [r1, #8]
 80020c4:	4682      	mov	sl, r0
 80020c6:	42be      	cmp	r6, r7
 80020c8:	460c      	mov	r4, r1
 80020ca:	4690      	mov	r8, r2
 80020cc:	680b      	ldr	r3, [r1, #0]
 80020ce:	d82c      	bhi.n	800212a <__ssputs_r+0x6e>
 80020d0:	898a      	ldrh	r2, [r1, #12]
 80020d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020d6:	d026      	beq.n	8002126 <__ssputs_r+0x6a>
 80020d8:	6965      	ldr	r5, [r4, #20]
 80020da:	6909      	ldr	r1, [r1, #16]
 80020dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020e0:	eba3 0901 	sub.w	r9, r3, r1
 80020e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020e8:	1c7b      	adds	r3, r7, #1
 80020ea:	444b      	add	r3, r9
 80020ec:	106d      	asrs	r5, r5, #1
 80020ee:	429d      	cmp	r5, r3
 80020f0:	bf38      	it	cc
 80020f2:	461d      	movcc	r5, r3
 80020f4:	0553      	lsls	r3, r2, #21
 80020f6:	d527      	bpl.n	8002148 <__ssputs_r+0x8c>
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7ff ff53 	bl	8001fa4 <_malloc_r>
 80020fe:	4606      	mov	r6, r0
 8002100:	b360      	cbz	r0, 800215c <__ssputs_r+0xa0>
 8002102:	464a      	mov	r2, r9
 8002104:	6921      	ldr	r1, [r4, #16]
 8002106:	f000 fafd 	bl	8002704 <memcpy>
 800210a:	89a3      	ldrh	r3, [r4, #12]
 800210c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	81a3      	strh	r3, [r4, #12]
 8002116:	6126      	str	r6, [r4, #16]
 8002118:	444e      	add	r6, r9
 800211a:	6026      	str	r6, [r4, #0]
 800211c:	463e      	mov	r6, r7
 800211e:	6165      	str	r5, [r4, #20]
 8002120:	eba5 0509 	sub.w	r5, r5, r9
 8002124:	60a5      	str	r5, [r4, #8]
 8002126:	42be      	cmp	r6, r7
 8002128:	d900      	bls.n	800212c <__ssputs_r+0x70>
 800212a:	463e      	mov	r6, r7
 800212c:	4632      	mov	r2, r6
 800212e:	4641      	mov	r1, r8
 8002130:	6820      	ldr	r0, [r4, #0]
 8002132:	f000 faaf 	bl	8002694 <memmove>
 8002136:	2000      	movs	r0, #0
 8002138:	68a3      	ldr	r3, [r4, #8]
 800213a:	1b9b      	subs	r3, r3, r6
 800213c:	60a3      	str	r3, [r4, #8]
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	4433      	add	r3, r6
 8002142:	6023      	str	r3, [r4, #0]
 8002144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002148:	462a      	mov	r2, r5
 800214a:	f000 fae9 	bl	8002720 <_realloc_r>
 800214e:	4606      	mov	r6, r0
 8002150:	2800      	cmp	r0, #0
 8002152:	d1e0      	bne.n	8002116 <__ssputs_r+0x5a>
 8002154:	4650      	mov	r0, sl
 8002156:	6921      	ldr	r1, [r4, #16]
 8002158:	f7ff febc 	bl	8001ed4 <_free_r>
 800215c:	230c      	movs	r3, #12
 800215e:	f8ca 3000 	str.w	r3, [sl]
 8002162:	89a3      	ldrh	r3, [r4, #12]
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	81a3      	strh	r3, [r4, #12]
 800216e:	e7e9      	b.n	8002144 <__ssputs_r+0x88>

08002170 <_svfiprintf_r>:
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	4698      	mov	r8, r3
 8002176:	898b      	ldrh	r3, [r1, #12]
 8002178:	4607      	mov	r7, r0
 800217a:	061b      	lsls	r3, r3, #24
 800217c:	460d      	mov	r5, r1
 800217e:	4614      	mov	r4, r2
 8002180:	b09d      	sub	sp, #116	; 0x74
 8002182:	d50e      	bpl.n	80021a2 <_svfiprintf_r+0x32>
 8002184:	690b      	ldr	r3, [r1, #16]
 8002186:	b963      	cbnz	r3, 80021a2 <_svfiprintf_r+0x32>
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	f7ff ff0b 	bl	8001fa4 <_malloc_r>
 800218e:	6028      	str	r0, [r5, #0]
 8002190:	6128      	str	r0, [r5, #16]
 8002192:	b920      	cbnz	r0, 800219e <_svfiprintf_r+0x2e>
 8002194:	230c      	movs	r3, #12
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	e0d0      	b.n	8002340 <_svfiprintf_r+0x1d0>
 800219e:	2340      	movs	r3, #64	; 0x40
 80021a0:	616b      	str	r3, [r5, #20]
 80021a2:	2300      	movs	r3, #0
 80021a4:	9309      	str	r3, [sp, #36]	; 0x24
 80021a6:	2320      	movs	r3, #32
 80021a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021ac:	2330      	movs	r3, #48	; 0x30
 80021ae:	f04f 0901 	mov.w	r9, #1
 80021b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80021b6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002358 <_svfiprintf_r+0x1e8>
 80021ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021be:	4623      	mov	r3, r4
 80021c0:	469a      	mov	sl, r3
 80021c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021c6:	b10a      	cbz	r2, 80021cc <_svfiprintf_r+0x5c>
 80021c8:	2a25      	cmp	r2, #37	; 0x25
 80021ca:	d1f9      	bne.n	80021c0 <_svfiprintf_r+0x50>
 80021cc:	ebba 0b04 	subs.w	fp, sl, r4
 80021d0:	d00b      	beq.n	80021ea <_svfiprintf_r+0x7a>
 80021d2:	465b      	mov	r3, fp
 80021d4:	4622      	mov	r2, r4
 80021d6:	4629      	mov	r1, r5
 80021d8:	4638      	mov	r0, r7
 80021da:	f7ff ff6f 	bl	80020bc <__ssputs_r>
 80021de:	3001      	adds	r0, #1
 80021e0:	f000 80a9 	beq.w	8002336 <_svfiprintf_r+0x1c6>
 80021e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021e6:	445a      	add	r2, fp
 80021e8:	9209      	str	r2, [sp, #36]	; 0x24
 80021ea:	f89a 3000 	ldrb.w	r3, [sl]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80a1 	beq.w	8002336 <_svfiprintf_r+0x1c6>
 80021f4:	2300      	movs	r3, #0
 80021f6:	f04f 32ff 	mov.w	r2, #4294967295
 80021fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021fe:	f10a 0a01 	add.w	sl, sl, #1
 8002202:	9304      	str	r3, [sp, #16]
 8002204:	9307      	str	r3, [sp, #28]
 8002206:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800220a:	931a      	str	r3, [sp, #104]	; 0x68
 800220c:	4654      	mov	r4, sl
 800220e:	2205      	movs	r2, #5
 8002210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002214:	4850      	ldr	r0, [pc, #320]	; (8002358 <_svfiprintf_r+0x1e8>)
 8002216:	f000 fa67 	bl	80026e8 <memchr>
 800221a:	9a04      	ldr	r2, [sp, #16]
 800221c:	b9d8      	cbnz	r0, 8002256 <_svfiprintf_r+0xe6>
 800221e:	06d0      	lsls	r0, r2, #27
 8002220:	bf44      	itt	mi
 8002222:	2320      	movmi	r3, #32
 8002224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002228:	0711      	lsls	r1, r2, #28
 800222a:	bf44      	itt	mi
 800222c:	232b      	movmi	r3, #43	; 0x2b
 800222e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002232:	f89a 3000 	ldrb.w	r3, [sl]
 8002236:	2b2a      	cmp	r3, #42	; 0x2a
 8002238:	d015      	beq.n	8002266 <_svfiprintf_r+0xf6>
 800223a:	4654      	mov	r4, sl
 800223c:	2000      	movs	r0, #0
 800223e:	f04f 0c0a 	mov.w	ip, #10
 8002242:	9a07      	ldr	r2, [sp, #28]
 8002244:	4621      	mov	r1, r4
 8002246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800224a:	3b30      	subs	r3, #48	; 0x30
 800224c:	2b09      	cmp	r3, #9
 800224e:	d94d      	bls.n	80022ec <_svfiprintf_r+0x17c>
 8002250:	b1b0      	cbz	r0, 8002280 <_svfiprintf_r+0x110>
 8002252:	9207      	str	r2, [sp, #28]
 8002254:	e014      	b.n	8002280 <_svfiprintf_r+0x110>
 8002256:	eba0 0308 	sub.w	r3, r0, r8
 800225a:	fa09 f303 	lsl.w	r3, r9, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	46a2      	mov	sl, r4
 8002262:	9304      	str	r3, [sp, #16]
 8002264:	e7d2      	b.n	800220c <_svfiprintf_r+0x9c>
 8002266:	9b03      	ldr	r3, [sp, #12]
 8002268:	1d19      	adds	r1, r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	9103      	str	r1, [sp, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	bfbb      	ittet	lt
 8002272:	425b      	neglt	r3, r3
 8002274:	f042 0202 	orrlt.w	r2, r2, #2
 8002278:	9307      	strge	r3, [sp, #28]
 800227a:	9307      	strlt	r3, [sp, #28]
 800227c:	bfb8      	it	lt
 800227e:	9204      	strlt	r2, [sp, #16]
 8002280:	7823      	ldrb	r3, [r4, #0]
 8002282:	2b2e      	cmp	r3, #46	; 0x2e
 8002284:	d10c      	bne.n	80022a0 <_svfiprintf_r+0x130>
 8002286:	7863      	ldrb	r3, [r4, #1]
 8002288:	2b2a      	cmp	r3, #42	; 0x2a
 800228a:	d134      	bne.n	80022f6 <_svfiprintf_r+0x186>
 800228c:	9b03      	ldr	r3, [sp, #12]
 800228e:	3402      	adds	r4, #2
 8002290:	1d1a      	adds	r2, r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	9203      	str	r2, [sp, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	bfb8      	it	lt
 800229a:	f04f 33ff 	movlt.w	r3, #4294967295
 800229e:	9305      	str	r3, [sp, #20]
 80022a0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800235c <_svfiprintf_r+0x1ec>
 80022a4:	2203      	movs	r2, #3
 80022a6:	4650      	mov	r0, sl
 80022a8:	7821      	ldrb	r1, [r4, #0]
 80022aa:	f000 fa1d 	bl	80026e8 <memchr>
 80022ae:	b138      	cbz	r0, 80022c0 <_svfiprintf_r+0x150>
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	9b04      	ldr	r3, [sp, #16]
 80022b4:	eba0 000a 	sub.w	r0, r0, sl
 80022b8:	4082      	lsls	r2, r0
 80022ba:	4313      	orrs	r3, r2
 80022bc:	3401      	adds	r4, #1
 80022be:	9304      	str	r3, [sp, #16]
 80022c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022c4:	2206      	movs	r2, #6
 80022c6:	4826      	ldr	r0, [pc, #152]	; (8002360 <_svfiprintf_r+0x1f0>)
 80022c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022cc:	f000 fa0c 	bl	80026e8 <memchr>
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d038      	beq.n	8002346 <_svfiprintf_r+0x1d6>
 80022d4:	4b23      	ldr	r3, [pc, #140]	; (8002364 <_svfiprintf_r+0x1f4>)
 80022d6:	bb1b      	cbnz	r3, 8002320 <_svfiprintf_r+0x1b0>
 80022d8:	9b03      	ldr	r3, [sp, #12]
 80022da:	3307      	adds	r3, #7
 80022dc:	f023 0307 	bic.w	r3, r3, #7
 80022e0:	3308      	adds	r3, #8
 80022e2:	9303      	str	r3, [sp, #12]
 80022e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022e6:	4433      	add	r3, r6
 80022e8:	9309      	str	r3, [sp, #36]	; 0x24
 80022ea:	e768      	b.n	80021be <_svfiprintf_r+0x4e>
 80022ec:	460c      	mov	r4, r1
 80022ee:	2001      	movs	r0, #1
 80022f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80022f4:	e7a6      	b.n	8002244 <_svfiprintf_r+0xd4>
 80022f6:	2300      	movs	r3, #0
 80022f8:	f04f 0c0a 	mov.w	ip, #10
 80022fc:	4619      	mov	r1, r3
 80022fe:	3401      	adds	r4, #1
 8002300:	9305      	str	r3, [sp, #20]
 8002302:	4620      	mov	r0, r4
 8002304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002308:	3a30      	subs	r2, #48	; 0x30
 800230a:	2a09      	cmp	r2, #9
 800230c:	d903      	bls.n	8002316 <_svfiprintf_r+0x1a6>
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0c6      	beq.n	80022a0 <_svfiprintf_r+0x130>
 8002312:	9105      	str	r1, [sp, #20]
 8002314:	e7c4      	b.n	80022a0 <_svfiprintf_r+0x130>
 8002316:	4604      	mov	r4, r0
 8002318:	2301      	movs	r3, #1
 800231a:	fb0c 2101 	mla	r1, ip, r1, r2
 800231e:	e7f0      	b.n	8002302 <_svfiprintf_r+0x192>
 8002320:	ab03      	add	r3, sp, #12
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	462a      	mov	r2, r5
 8002326:	4638      	mov	r0, r7
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <_svfiprintf_r+0x1f8>)
 800232a:	a904      	add	r1, sp, #16
 800232c:	f3af 8000 	nop.w
 8002330:	1c42      	adds	r2, r0, #1
 8002332:	4606      	mov	r6, r0
 8002334:	d1d6      	bne.n	80022e4 <_svfiprintf_r+0x174>
 8002336:	89ab      	ldrh	r3, [r5, #12]
 8002338:	065b      	lsls	r3, r3, #25
 800233a:	f53f af2d 	bmi.w	8002198 <_svfiprintf_r+0x28>
 800233e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002340:	b01d      	add	sp, #116	; 0x74
 8002342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002346:	ab03      	add	r3, sp, #12
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	462a      	mov	r2, r5
 800234c:	4638      	mov	r0, r7
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <_svfiprintf_r+0x1f8>)
 8002350:	a904      	add	r1, sp, #16
 8002352:	f000 f87d 	bl	8002450 <_printf_i>
 8002356:	e7eb      	b.n	8002330 <_svfiprintf_r+0x1c0>
 8002358:	080027d6 	.word	0x080027d6
 800235c:	080027dc 	.word	0x080027dc
 8002360:	080027e0 	.word	0x080027e0
 8002364:	00000000 	.word	0x00000000
 8002368:	080020bd 	.word	0x080020bd

0800236c <_printf_common>:
 800236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002370:	4616      	mov	r6, r2
 8002372:	4699      	mov	r9, r3
 8002374:	688a      	ldr	r2, [r1, #8]
 8002376:	690b      	ldr	r3, [r1, #16]
 8002378:	4607      	mov	r7, r0
 800237a:	4293      	cmp	r3, r2
 800237c:	bfb8      	it	lt
 800237e:	4613      	movlt	r3, r2
 8002380:	6033      	str	r3, [r6, #0]
 8002382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002386:	460c      	mov	r4, r1
 8002388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800238c:	b10a      	cbz	r2, 8002392 <_printf_common+0x26>
 800238e:	3301      	adds	r3, #1
 8002390:	6033      	str	r3, [r6, #0]
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	0699      	lsls	r1, r3, #26
 8002396:	bf42      	ittt	mi
 8002398:	6833      	ldrmi	r3, [r6, #0]
 800239a:	3302      	addmi	r3, #2
 800239c:	6033      	strmi	r3, [r6, #0]
 800239e:	6825      	ldr	r5, [r4, #0]
 80023a0:	f015 0506 	ands.w	r5, r5, #6
 80023a4:	d106      	bne.n	80023b4 <_printf_common+0x48>
 80023a6:	f104 0a19 	add.w	sl, r4, #25
 80023aa:	68e3      	ldr	r3, [r4, #12]
 80023ac:	6832      	ldr	r2, [r6, #0]
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	42ab      	cmp	r3, r5
 80023b2:	dc2b      	bgt.n	800240c <_printf_common+0xa0>
 80023b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023b8:	1e13      	subs	r3, r2, #0
 80023ba:	6822      	ldr	r2, [r4, #0]
 80023bc:	bf18      	it	ne
 80023be:	2301      	movne	r3, #1
 80023c0:	0692      	lsls	r2, r2, #26
 80023c2:	d430      	bmi.n	8002426 <_printf_common+0xba>
 80023c4:	4649      	mov	r1, r9
 80023c6:	4638      	mov	r0, r7
 80023c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023cc:	47c0      	blx	r8
 80023ce:	3001      	adds	r0, #1
 80023d0:	d023      	beq.n	800241a <_printf_common+0xae>
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	6922      	ldr	r2, [r4, #16]
 80023d6:	f003 0306 	and.w	r3, r3, #6
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf14      	ite	ne
 80023de:	2500      	movne	r5, #0
 80023e0:	6833      	ldreq	r3, [r6, #0]
 80023e2:	f04f 0600 	mov.w	r6, #0
 80023e6:	bf08      	it	eq
 80023e8:	68e5      	ldreq	r5, [r4, #12]
 80023ea:	f104 041a 	add.w	r4, r4, #26
 80023ee:	bf08      	it	eq
 80023f0:	1aed      	subeq	r5, r5, r3
 80023f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80023f6:	bf08      	it	eq
 80023f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bfc4      	itt	gt
 8002400:	1a9b      	subgt	r3, r3, r2
 8002402:	18ed      	addgt	r5, r5, r3
 8002404:	42b5      	cmp	r5, r6
 8002406:	d11a      	bne.n	800243e <_printf_common+0xd2>
 8002408:	2000      	movs	r0, #0
 800240a:	e008      	b.n	800241e <_printf_common+0xb2>
 800240c:	2301      	movs	r3, #1
 800240e:	4652      	mov	r2, sl
 8002410:	4649      	mov	r1, r9
 8002412:	4638      	mov	r0, r7
 8002414:	47c0      	blx	r8
 8002416:	3001      	adds	r0, #1
 8002418:	d103      	bne.n	8002422 <_printf_common+0xb6>
 800241a:	f04f 30ff 	mov.w	r0, #4294967295
 800241e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002422:	3501      	adds	r5, #1
 8002424:	e7c1      	b.n	80023aa <_printf_common+0x3e>
 8002426:	2030      	movs	r0, #48	; 0x30
 8002428:	18e1      	adds	r1, r4, r3
 800242a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800242e:	1c5a      	adds	r2, r3, #1
 8002430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002434:	4422      	add	r2, r4
 8002436:	3302      	adds	r3, #2
 8002438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800243c:	e7c2      	b.n	80023c4 <_printf_common+0x58>
 800243e:	2301      	movs	r3, #1
 8002440:	4622      	mov	r2, r4
 8002442:	4649      	mov	r1, r9
 8002444:	4638      	mov	r0, r7
 8002446:	47c0      	blx	r8
 8002448:	3001      	adds	r0, #1
 800244a:	d0e6      	beq.n	800241a <_printf_common+0xae>
 800244c:	3601      	adds	r6, #1
 800244e:	e7d9      	b.n	8002404 <_printf_common+0x98>

08002450 <_printf_i>:
 8002450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002454:	7e0f      	ldrb	r7, [r1, #24]
 8002456:	4691      	mov	r9, r2
 8002458:	2f78      	cmp	r7, #120	; 0x78
 800245a:	4680      	mov	r8, r0
 800245c:	460c      	mov	r4, r1
 800245e:	469a      	mov	sl, r3
 8002460:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002466:	d807      	bhi.n	8002478 <_printf_i+0x28>
 8002468:	2f62      	cmp	r7, #98	; 0x62
 800246a:	d80a      	bhi.n	8002482 <_printf_i+0x32>
 800246c:	2f00      	cmp	r7, #0
 800246e:	f000 80d5 	beq.w	800261c <_printf_i+0x1cc>
 8002472:	2f58      	cmp	r7, #88	; 0x58
 8002474:	f000 80c1 	beq.w	80025fa <_printf_i+0x1aa>
 8002478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800247c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002480:	e03a      	b.n	80024f8 <_printf_i+0xa8>
 8002482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002486:	2b15      	cmp	r3, #21
 8002488:	d8f6      	bhi.n	8002478 <_printf_i+0x28>
 800248a:	a101      	add	r1, pc, #4	; (adr r1, 8002490 <_printf_i+0x40>)
 800248c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002490:	080024e9 	.word	0x080024e9
 8002494:	080024fd 	.word	0x080024fd
 8002498:	08002479 	.word	0x08002479
 800249c:	08002479 	.word	0x08002479
 80024a0:	08002479 	.word	0x08002479
 80024a4:	08002479 	.word	0x08002479
 80024a8:	080024fd 	.word	0x080024fd
 80024ac:	08002479 	.word	0x08002479
 80024b0:	08002479 	.word	0x08002479
 80024b4:	08002479 	.word	0x08002479
 80024b8:	08002479 	.word	0x08002479
 80024bc:	08002603 	.word	0x08002603
 80024c0:	08002529 	.word	0x08002529
 80024c4:	080025bd 	.word	0x080025bd
 80024c8:	08002479 	.word	0x08002479
 80024cc:	08002479 	.word	0x08002479
 80024d0:	08002625 	.word	0x08002625
 80024d4:	08002479 	.word	0x08002479
 80024d8:	08002529 	.word	0x08002529
 80024dc:	08002479 	.word	0x08002479
 80024e0:	08002479 	.word	0x08002479
 80024e4:	080025c5 	.word	0x080025c5
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	1d1a      	adds	r2, r3, #4
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	602a      	str	r2, [r5, #0]
 80024f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0a0      	b.n	800263e <_printf_i+0x1ee>
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	682b      	ldr	r3, [r5, #0]
 8002500:	0607      	lsls	r7, r0, #24
 8002502:	f103 0104 	add.w	r1, r3, #4
 8002506:	6029      	str	r1, [r5, #0]
 8002508:	d501      	bpl.n	800250e <_printf_i+0xbe>
 800250a:	681e      	ldr	r6, [r3, #0]
 800250c:	e003      	b.n	8002516 <_printf_i+0xc6>
 800250e:	0646      	lsls	r6, r0, #25
 8002510:	d5fb      	bpl.n	800250a <_printf_i+0xba>
 8002512:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002516:	2e00      	cmp	r6, #0
 8002518:	da03      	bge.n	8002522 <_printf_i+0xd2>
 800251a:	232d      	movs	r3, #45	; 0x2d
 800251c:	4276      	negs	r6, r6
 800251e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002522:	230a      	movs	r3, #10
 8002524:	4859      	ldr	r0, [pc, #356]	; (800268c <_printf_i+0x23c>)
 8002526:	e012      	b.n	800254e <_printf_i+0xfe>
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	1d19      	adds	r1, r3, #4
 800252e:	6029      	str	r1, [r5, #0]
 8002530:	0605      	lsls	r5, r0, #24
 8002532:	d501      	bpl.n	8002538 <_printf_i+0xe8>
 8002534:	681e      	ldr	r6, [r3, #0]
 8002536:	e002      	b.n	800253e <_printf_i+0xee>
 8002538:	0641      	lsls	r1, r0, #25
 800253a:	d5fb      	bpl.n	8002534 <_printf_i+0xe4>
 800253c:	881e      	ldrh	r6, [r3, #0]
 800253e:	2f6f      	cmp	r7, #111	; 0x6f
 8002540:	bf0c      	ite	eq
 8002542:	2308      	moveq	r3, #8
 8002544:	230a      	movne	r3, #10
 8002546:	4851      	ldr	r0, [pc, #324]	; (800268c <_printf_i+0x23c>)
 8002548:	2100      	movs	r1, #0
 800254a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800254e:	6865      	ldr	r5, [r4, #4]
 8002550:	2d00      	cmp	r5, #0
 8002552:	bfa8      	it	ge
 8002554:	6821      	ldrge	r1, [r4, #0]
 8002556:	60a5      	str	r5, [r4, #8]
 8002558:	bfa4      	itt	ge
 800255a:	f021 0104 	bicge.w	r1, r1, #4
 800255e:	6021      	strge	r1, [r4, #0]
 8002560:	b90e      	cbnz	r6, 8002566 <_printf_i+0x116>
 8002562:	2d00      	cmp	r5, #0
 8002564:	d04b      	beq.n	80025fe <_printf_i+0x1ae>
 8002566:	4615      	mov	r5, r2
 8002568:	fbb6 f1f3 	udiv	r1, r6, r3
 800256c:	fb03 6711 	mls	r7, r3, r1, r6
 8002570:	5dc7      	ldrb	r7, [r0, r7]
 8002572:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002576:	4637      	mov	r7, r6
 8002578:	42bb      	cmp	r3, r7
 800257a:	460e      	mov	r6, r1
 800257c:	d9f4      	bls.n	8002568 <_printf_i+0x118>
 800257e:	2b08      	cmp	r3, #8
 8002580:	d10b      	bne.n	800259a <_printf_i+0x14a>
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	07de      	lsls	r6, r3, #31
 8002586:	d508      	bpl.n	800259a <_printf_i+0x14a>
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	6861      	ldr	r1, [r4, #4]
 800258c:	4299      	cmp	r1, r3
 800258e:	bfde      	ittt	le
 8002590:	2330      	movle	r3, #48	; 0x30
 8002592:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002596:	f105 35ff 	addle.w	r5, r5, #4294967295
 800259a:	1b52      	subs	r2, r2, r5
 800259c:	6122      	str	r2, [r4, #16]
 800259e:	464b      	mov	r3, r9
 80025a0:	4621      	mov	r1, r4
 80025a2:	4640      	mov	r0, r8
 80025a4:	f8cd a000 	str.w	sl, [sp]
 80025a8:	aa03      	add	r2, sp, #12
 80025aa:	f7ff fedf 	bl	800236c <_printf_common>
 80025ae:	3001      	adds	r0, #1
 80025b0:	d14a      	bne.n	8002648 <_printf_i+0x1f8>
 80025b2:	f04f 30ff 	mov.w	r0, #4294967295
 80025b6:	b004      	add	sp, #16
 80025b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	f043 0320 	orr.w	r3, r3, #32
 80025c2:	6023      	str	r3, [r4, #0]
 80025c4:	2778      	movs	r7, #120	; 0x78
 80025c6:	4832      	ldr	r0, [pc, #200]	; (8002690 <_printf_i+0x240>)
 80025c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	6829      	ldr	r1, [r5, #0]
 80025d0:	061f      	lsls	r7, r3, #24
 80025d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80025d6:	d402      	bmi.n	80025de <_printf_i+0x18e>
 80025d8:	065f      	lsls	r7, r3, #25
 80025da:	bf48      	it	mi
 80025dc:	b2b6      	uxthmi	r6, r6
 80025de:	07df      	lsls	r7, r3, #31
 80025e0:	bf48      	it	mi
 80025e2:	f043 0320 	orrmi.w	r3, r3, #32
 80025e6:	6029      	str	r1, [r5, #0]
 80025e8:	bf48      	it	mi
 80025ea:	6023      	strmi	r3, [r4, #0]
 80025ec:	b91e      	cbnz	r6, 80025f6 <_printf_i+0x1a6>
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	f023 0320 	bic.w	r3, r3, #32
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	2310      	movs	r3, #16
 80025f8:	e7a6      	b.n	8002548 <_printf_i+0xf8>
 80025fa:	4824      	ldr	r0, [pc, #144]	; (800268c <_printf_i+0x23c>)
 80025fc:	e7e4      	b.n	80025c8 <_printf_i+0x178>
 80025fe:	4615      	mov	r5, r2
 8002600:	e7bd      	b.n	800257e <_printf_i+0x12e>
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	6826      	ldr	r6, [r4, #0]
 8002606:	1d18      	adds	r0, r3, #4
 8002608:	6961      	ldr	r1, [r4, #20]
 800260a:	6028      	str	r0, [r5, #0]
 800260c:	0635      	lsls	r5, r6, #24
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	d501      	bpl.n	8002616 <_printf_i+0x1c6>
 8002612:	6019      	str	r1, [r3, #0]
 8002614:	e002      	b.n	800261c <_printf_i+0x1cc>
 8002616:	0670      	lsls	r0, r6, #25
 8002618:	d5fb      	bpl.n	8002612 <_printf_i+0x1c2>
 800261a:	8019      	strh	r1, [r3, #0]
 800261c:	2300      	movs	r3, #0
 800261e:	4615      	mov	r5, r2
 8002620:	6123      	str	r3, [r4, #16]
 8002622:	e7bc      	b.n	800259e <_printf_i+0x14e>
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	2100      	movs	r1, #0
 8002628:	1d1a      	adds	r2, r3, #4
 800262a:	602a      	str	r2, [r5, #0]
 800262c:	681d      	ldr	r5, [r3, #0]
 800262e:	6862      	ldr	r2, [r4, #4]
 8002630:	4628      	mov	r0, r5
 8002632:	f000 f859 	bl	80026e8 <memchr>
 8002636:	b108      	cbz	r0, 800263c <_printf_i+0x1ec>
 8002638:	1b40      	subs	r0, r0, r5
 800263a:	6060      	str	r0, [r4, #4]
 800263c:	6863      	ldr	r3, [r4, #4]
 800263e:	6123      	str	r3, [r4, #16]
 8002640:	2300      	movs	r3, #0
 8002642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002646:	e7aa      	b.n	800259e <_printf_i+0x14e>
 8002648:	462a      	mov	r2, r5
 800264a:	4649      	mov	r1, r9
 800264c:	4640      	mov	r0, r8
 800264e:	6923      	ldr	r3, [r4, #16]
 8002650:	47d0      	blx	sl
 8002652:	3001      	adds	r0, #1
 8002654:	d0ad      	beq.n	80025b2 <_printf_i+0x162>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	079b      	lsls	r3, r3, #30
 800265a:	d413      	bmi.n	8002684 <_printf_i+0x234>
 800265c:	68e0      	ldr	r0, [r4, #12]
 800265e:	9b03      	ldr	r3, [sp, #12]
 8002660:	4298      	cmp	r0, r3
 8002662:	bfb8      	it	lt
 8002664:	4618      	movlt	r0, r3
 8002666:	e7a6      	b.n	80025b6 <_printf_i+0x166>
 8002668:	2301      	movs	r3, #1
 800266a:	4632      	mov	r2, r6
 800266c:	4649      	mov	r1, r9
 800266e:	4640      	mov	r0, r8
 8002670:	47d0      	blx	sl
 8002672:	3001      	adds	r0, #1
 8002674:	d09d      	beq.n	80025b2 <_printf_i+0x162>
 8002676:	3501      	adds	r5, #1
 8002678:	68e3      	ldr	r3, [r4, #12]
 800267a:	9903      	ldr	r1, [sp, #12]
 800267c:	1a5b      	subs	r3, r3, r1
 800267e:	42ab      	cmp	r3, r5
 8002680:	dcf2      	bgt.n	8002668 <_printf_i+0x218>
 8002682:	e7eb      	b.n	800265c <_printf_i+0x20c>
 8002684:	2500      	movs	r5, #0
 8002686:	f104 0619 	add.w	r6, r4, #25
 800268a:	e7f5      	b.n	8002678 <_printf_i+0x228>
 800268c:	080027e7 	.word	0x080027e7
 8002690:	080027f8 	.word	0x080027f8

08002694 <memmove>:
 8002694:	4288      	cmp	r0, r1
 8002696:	b510      	push	{r4, lr}
 8002698:	eb01 0402 	add.w	r4, r1, r2
 800269c:	d902      	bls.n	80026a4 <memmove+0x10>
 800269e:	4284      	cmp	r4, r0
 80026a0:	4623      	mov	r3, r4
 80026a2:	d807      	bhi.n	80026b4 <memmove+0x20>
 80026a4:	1e43      	subs	r3, r0, #1
 80026a6:	42a1      	cmp	r1, r4
 80026a8:	d008      	beq.n	80026bc <memmove+0x28>
 80026aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026b2:	e7f8      	b.n	80026a6 <memmove+0x12>
 80026b4:	4601      	mov	r1, r0
 80026b6:	4402      	add	r2, r0
 80026b8:	428a      	cmp	r2, r1
 80026ba:	d100      	bne.n	80026be <memmove+0x2a>
 80026bc:	bd10      	pop	{r4, pc}
 80026be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026c6:	e7f7      	b.n	80026b8 <memmove+0x24>

080026c8 <_sbrk_r>:
 80026c8:	b538      	push	{r3, r4, r5, lr}
 80026ca:	2300      	movs	r3, #0
 80026cc:	4d05      	ldr	r5, [pc, #20]	; (80026e4 <_sbrk_r+0x1c>)
 80026ce:	4604      	mov	r4, r0
 80026d0:	4608      	mov	r0, r1
 80026d2:	602b      	str	r3, [r5, #0]
 80026d4:	f7fd ffaa 	bl	800062c <_sbrk>
 80026d8:	1c43      	adds	r3, r0, #1
 80026da:	d102      	bne.n	80026e2 <_sbrk_r+0x1a>
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	b103      	cbz	r3, 80026e2 <_sbrk_r+0x1a>
 80026e0:	6023      	str	r3, [r4, #0]
 80026e2:	bd38      	pop	{r3, r4, r5, pc}
 80026e4:	2000020c 	.word	0x2000020c

080026e8 <memchr>:
 80026e8:	4603      	mov	r3, r0
 80026ea:	b510      	push	{r4, lr}
 80026ec:	b2c9      	uxtb	r1, r1
 80026ee:	4402      	add	r2, r0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	d101      	bne.n	80026fa <memchr+0x12>
 80026f6:	2000      	movs	r0, #0
 80026f8:	e003      	b.n	8002702 <memchr+0x1a>
 80026fa:	7804      	ldrb	r4, [r0, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	428c      	cmp	r4, r1
 8002700:	d1f6      	bne.n	80026f0 <memchr+0x8>
 8002702:	bd10      	pop	{r4, pc}

08002704 <memcpy>:
 8002704:	440a      	add	r2, r1
 8002706:	4291      	cmp	r1, r2
 8002708:	f100 33ff 	add.w	r3, r0, #4294967295
 800270c:	d100      	bne.n	8002710 <memcpy+0xc>
 800270e:	4770      	bx	lr
 8002710:	b510      	push	{r4, lr}
 8002712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002716:	4291      	cmp	r1, r2
 8002718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800271c:	d1f9      	bne.n	8002712 <memcpy+0xe>
 800271e:	bd10      	pop	{r4, pc}

08002720 <_realloc_r>:
 8002720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002724:	4680      	mov	r8, r0
 8002726:	4614      	mov	r4, r2
 8002728:	460e      	mov	r6, r1
 800272a:	b921      	cbnz	r1, 8002736 <_realloc_r+0x16>
 800272c:	4611      	mov	r1, r2
 800272e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002732:	f7ff bc37 	b.w	8001fa4 <_malloc_r>
 8002736:	b92a      	cbnz	r2, 8002744 <_realloc_r+0x24>
 8002738:	f7ff fbcc 	bl	8001ed4 <_free_r>
 800273c:	4625      	mov	r5, r4
 800273e:	4628      	mov	r0, r5
 8002740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002744:	f000 f81b 	bl	800277e <_malloc_usable_size_r>
 8002748:	4284      	cmp	r4, r0
 800274a:	4607      	mov	r7, r0
 800274c:	d802      	bhi.n	8002754 <_realloc_r+0x34>
 800274e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002752:	d812      	bhi.n	800277a <_realloc_r+0x5a>
 8002754:	4621      	mov	r1, r4
 8002756:	4640      	mov	r0, r8
 8002758:	f7ff fc24 	bl	8001fa4 <_malloc_r>
 800275c:	4605      	mov	r5, r0
 800275e:	2800      	cmp	r0, #0
 8002760:	d0ed      	beq.n	800273e <_realloc_r+0x1e>
 8002762:	42bc      	cmp	r4, r7
 8002764:	4622      	mov	r2, r4
 8002766:	4631      	mov	r1, r6
 8002768:	bf28      	it	cs
 800276a:	463a      	movcs	r2, r7
 800276c:	f7ff ffca 	bl	8002704 <memcpy>
 8002770:	4631      	mov	r1, r6
 8002772:	4640      	mov	r0, r8
 8002774:	f7ff fbae 	bl	8001ed4 <_free_r>
 8002778:	e7e1      	b.n	800273e <_realloc_r+0x1e>
 800277a:	4635      	mov	r5, r6
 800277c:	e7df      	b.n	800273e <_realloc_r+0x1e>

0800277e <_malloc_usable_size_r>:
 800277e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002782:	1f18      	subs	r0, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	bfbc      	itt	lt
 8002788:	580b      	ldrlt	r3, [r1, r0]
 800278a:	18c0      	addlt	r0, r0, r3
 800278c:	4770      	bx	lr
	...

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
